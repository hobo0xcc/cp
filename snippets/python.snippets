snippet tmp "tmp"
import sys

stdin = sys.stdin
inf = 1 << 60
mod = 1000000007

ni      = lambda: int(ns())
nin     = lambda y: [ni() for _ in range(y)]
na      = lambda: list(map(int, stdin.readline().split()))
nan     = lambda y: [na() for _ in range(y)]
nf      = lambda: float(ns())
nfn     = lambda y: [nf() for _ in range(y)]
nfa     = lambda: list(map(float, stdin.readline().split()))
nfan    = lambda y: [nfa() for _ in range(y)]
ns      = lambda: stdin.readline().rstrip()
nsn     = lambda y: [ns() for _ in range(y)]
ncl     = lambda y: [list(ns()) for _ in range(y)]
nas     = lambda: stdin.readline().split()

endsnippet

snippet gcd "gcd"
def gcd(m, n):
	if n == 0:
		return m
	else:
		return gcd(n, m % n)

endsnippet

snippet lcm "lcm"
def gcd(m, n):
	if n == 0:
		return m
	else:
		return gcd(n, m % n)

def lcm(m, n):
	return m * n // gcd(m, n)

endsnippet

snippet modpow "modpow"
def modpow(n, p, m):
	if p == 0:
		return 1
	if p % 2 == 0:
		t = modpow(n, p // 2, m)
		return t * t % m
	return n * modpow(n, p - 1, m) % m

endsnippet

snippet modinv "modinv"
def modinv(n, m):
	b = m
	u = 1
	v = 0
	while b:
		t = a // b
		a -= t * b
		a, b = b, a
		u -= t * v
		u, v = v, u
	u %= m
	if u < 0:
		u += m
	return u
endsnippet

snippet UnionFind "UnionFind"
class UnionFind:
	def __init__(self, n):
		self.n = n
		self.par = [i for i in range(n)]
		self.rank = [0 for _ in range(n)]
		self._size = [1 for _ in range(n)]
		self._edges = 0

	def find(self, x):
		if self.par[x] == x:
			return x
		else:
			self.par[x] = self.find(self.par[x])
			return self.par[x]
		
	def unite(self, x, y):
		x = self.find(x)
		y = self.find(y)
		if x == y:
			return
		if self.rank[x] < self.rank[y]:
			self.par[x] = y
			self._size[y] += self._size[x]
			self._edges += 1
		else:
			self.par[y] = x
			if self.rank[x] == self.rank[y]:
				self.rank[x] += 1
			self._size[x] += self._size[y]
			self._edges += 1
	
	def size(self, x):
		x = self.find(x)
		return self._size[x]
	
	def trees(self):
		return self.n - self._edges

	def same(self, x, y):
		return self.find(x) == self.find(y)

endsnippet

snippet WUnionFind "WUnionFind"
class WUnionFind:
	def __init__(self, n, sum_unity=0):
		self.n = n
		self.par = [i for i in range(n)]
		self.rank = [0 for _ in range(n)]
		self.diff_weight = [sum_unity for _ in range(n)]
		self._size = [1 for _ in range(n)]
		self._edges = 0

	def find(self, x):
		if self.par[x] == x:
			return x
		else:
			r = self.find(self.par[x])
			self.diff_weight[x] += self.diff_weight[self.par[x]]
			self.par[x] = r
			return r
		
	def unite(self, x, y, w):
		w += self.weight(x)
		w -= self.weight(y)
		x = self.find(x)
		y = self.find(y)
		if x == y:
			return
		if self.rank[x] < self.rank[y]:
			self.par[x] = y
			self.diff_weight[x] = -w
			self._size[y] += self._size[x]
			self._edges += 1
		else:
			self.par[y] = x
			self.diff_weight[y] = w
			if self.rank[x] == self.rank[y]:
				self.rank[x] += 1
			self._size[x] += self._size[y]
			self._edges += 1

	def weight(self, x):
		self.find(x)
		return self.diff_weight[x]

	def diff(self, x, y):
		return self.weight(y) - self.weight(x)
	
	def size(self, x):
		x = self.find(x)
		return self._size[x]
	
	def trees(self):
		return self.n - self._edges

	def same(self, x, y):
		return self.find(x) == self.find(y)

endsnippet

snippet floyd_warshall "floyd_warshall"
def floyd_warshall(n, dist):
	for i in range(n):
		for j in range(n):
			for k in range(n):
				dist[j][k] = min(dist[j][k], dist[j][i] + dist[i][k])

endsnippet

snippet dijkstra "dijkstra"
def dijkstra(g, x):
	dist = [inf] * len(g)
	dist[x] = 0
	q = []
	proc = [False for _ in range(len(g))]
	heappush(q, (0, x))
	while len(q):
		p = heappop(q)
		a = p[1]
		# if proc[a]:
		#	  continue
		# proc[a] = True
		for b in g[a]:
			if dist[a] + 1 < dist[b]:
				dist[b] = dist[a] + 1
				heappush(q, (-dist[b], b))
	
	return dist

endsnippet

snippet is_prime "is_prime"
def is_prime(x):
	i = 2
	if x <= 1:
		return False
	while i * i <= x:
		if x % i == 0:
			return False
		i += 1
	return True

endsnippet

snippet runlength "runlength"
def runlength(a):
	res = []
	last = None
	c = -1
	for i in a:
		if last == i:
			res[c][1] += 1
			last = i
		else:
			c += 1
			res.append([i, 1])
			last = i
	return res

endsnippet

snippet ModInt "ModInt"
class ModInt:
	def __init__(self, n=0, mod=mod):
		self.mod = mod
		self.n = n % self.mod
	
	def value(self):
		return self.n
	
	def __add__(self, rhs):
		if isinstance(rhs, ModInt):
			return self.__class__(self.n + rhs.n, self.mod)
		return self.__class__(self.n + rhs, self.mod)
	
	__radd__ = __add__
	
	def __sub__(self, rhs):
		if isinstance(rhs, ModInt):
			return self.__class__(self.n - rhs.n, self.mod)
		return self.__class__(self.n - rhs, self.mod)
	
	def __rsub__(self, lhs):
		if isinstance(lhs, ModInt):
			return self.__class__(lhs.n - self.n, self.mod)
		return self.__class__(lhs - self.n, self.mod)

	def __mul__(self, rhs):
		if isinstance(rhs, ModInt):
			return self.__class__(self.n * rhs.n, self.mod)
		return self.__class__(self.n * rhs, self.mod)
	
	__rmul__ = __mul__

	def __floordiv__(self, rhs):
		if isinstance(rhs, ModInt):
			return self.__class__(self.n // rhs.n, self.mod)
		return self.__class__(self.n // rhs, self.mod)
	
	def __rfloordiv__(self, lhs):
		if isinstance(lhs, ModInt):
			return self.__class__(lhs.n // self.n, self.mod)
		return self.__class__(lhs // self.n, self.mod)

	def __iadd__(self, rhs):
		if isinstance(rhs, ModInt):
			self.n += rhs.n
		else:
			self.n += rhs
		if self.n >= self.mod:
			self.n -= self.mod
		
		return self
	
	def __isub__(self, rhs):
		rhs_n = rhs.n if isinstance(rhs, ModInt) else rhs
		if self.n < rhs_n:
			self.n += self.mod
		self.n -= rhs_n
		return self
	
	def __imul__(self, rhs):
		rhs_n = rhs.n if isinstance(rhs, ModInt) else rhs
		self.n = self.n * rhs_n % self.mod
		return self
	
	def __ifloordiv__(self, rhs):
		rhs_n = rhs.n if isinstance(rhs, ModInt) else rhs
		exp = self.mod - 2
		while exp:
			if exp % 2:
				self *= rhs_n
			
			rhs_n *= rhs_n
			rhs_n %= self.mod
			exp //= 2
		
		return self
	
	def __pow__(self, exp):
		exp_n = exp.n if isinstance(exp, ModInt) else exp
		if exp_n == 0:
			return self.__class__(1, self.mod)
		if exp_n % 2 == 0:
			t = self.__pow__(exp_n // 2)
			return t * t
		return self * self.__pow__(exp_n - 1)
	
	def __str__(self):
		return str(self.n)

endsnippet

snippet comb "comb"
def comb(n, k):
	if n == k or k == 0:
		return 1
	if n < k:
		return 0
	
	res = ModInt(1)
	for i in range(k):
		res *= (n - i)
		res *= ModInt(i + 1) ** (mod - 2)
	
	return res

endsnippet
